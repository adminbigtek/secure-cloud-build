steps:
  # Kiểm tra mã nguồn
  - id: "test"
    name: 'gcr.io/cloud-builders/docker'
    args: ['run', '--rm', 'us-central1-docker.pkg.dev/${PROJECT_ID}/artifact-scanning-repo/sample-image', 'npm', 'test']

  # Xây dựng hình ảnh Docker
  - id: "build"
    name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/${PROJECT_ID}/artifact-scanning-repo/sample-image', '.']
    waitFor: ['-']

  # Quét lỗ hổng bảo mật
  - id: "scan"
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      (gcloud artifacts docker images scan \
      us-central1-docker.pkg.dev/${PROJECT_ID}/artifact-scanning-repo/sample-image \
      --location us \
      --format="value(response.scan)") > /workspace/scan_id.txt

  # Phân tích kết quả quét
  - id: "severity check"
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
        gcloud artifacts docker images list-vulnerabilities \$(cat /workspace/scan_id.txt) \
        --format="value(vulnerability.effectiveSeverity)" | if grep -Fxq CRITICAL; \
        then echo "Failed vulnerability check for CRITICAL level" && exit 1; else echo "No CRITICAL vulnerability found, congrats !" && exit 0; fi

  # Gắn thẻ lại hình ảnh Docker
  - id: "retag"
    name: 'gcr.io/cloud-builders/docker'
    args: ['tag',  'us-central1-docker.pkg.dev/${PROJECT_ID}/artifact-scanning-repo/sample-image', 'us-central1-docker.pkg.dev/${PROJECT_ID}/artifact-scanning-repo/sample-image:good']

  # Đẩy hình ảnh Docker lên Artifact Registry
  - id: "push"
    name: 'gcr.io/cloud-builders/docker'
    args: ['push',  'us-central1-docker.pkg.dev/${PROJECT_ID}/artifact-scanning-repo/sample-image:good']

  # Triển khai ứng dụng (ví dụ với Kubernetes)
  - id: "deploy"
    name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'k8s/deployment.yaml']

images:
  - us-central1-docker.pkg.dev/${PROJECT_ID}/artifact-scanning-repo/sample-image
